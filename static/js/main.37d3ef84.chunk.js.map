{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","App","_useState","useState","_useState2","Object","slicedToArray","name","setName","_useState3","_useState4","userName","setUsername","_useState5","_useState6","followers","setFollowers","_useState7","_useState8","following","setFollowing","_useState9","_useState10","repos","setRepos","_useState11","_useState12","avatar","setAvatar","_useState13","_useState14","userInput","setUserInput","_useState15","_useState16","repoData","setRepoData","_useState17","_useState18","error","setError","useEffect","fetch","then","res","json","data","setData","_ref","login","public_repos","avatar_url","_repoDataURL","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","concat","result","console","log","list","map","item","react_default","createElement","className","Card","Content","extra","List","divided","relaxed","Item","Icon","size","verticalAlign","Header","as","href","svn_url","Description","created_at","stop","apply","this","arguments","Image","circular","src","Form","onSubmit","message","Group","Input","placeholder","onChange","e","target","value","Button","content","Message","negative","wrapped","ui","variant","onClick","Grid","Column","width","Segment","style","height","overflowY","reportWebVitals","onPerfEntry","Function","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,wRCiKzBC,MA5Jf,WAAe,IAAAC,EACWC,mBAAS,IADpBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNK,EADMH,EAAA,GACAI,EADAJ,EAAA,GAAAK,EAEmBN,mBAAS,IAF5BO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAENE,EAFMD,EAAA,GAEIE,EAFJF,EAAA,GAAAG,EAGoBV,mBAAS,IAH7BW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAGNE,EAHMD,EAAA,GAGIE,EAHJF,EAAA,GAAAG,EAIqBd,mBAAS,IAJ9Be,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAINE,EAJMD,EAAA,GAIKE,EAJLF,EAAA,GAAAG,EAKalB,mBAAS,IALtBmB,EAAAjB,OAAAC,EAAA,EAAAD,CAAAgB,EAAA,GAKNE,EALMD,EAAA,GAKCE,EALDF,EAAA,GAAAG,EAMctB,mBAAS,IANvBuB,EAAArB,OAAAC,EAAA,EAAAD,CAAAoB,EAAA,GAMNE,EANMD,EAAA,GAMCE,EANDF,EAAA,GAAAG,EAOqB1B,mBAAS,IAP9B2B,EAAAzB,OAAAC,EAAA,EAAAD,CAAAwB,EAAA,GAONE,EAPMD,EAAA,GAOKE,EAPLF,EAAA,GAAAG,EAQmB9B,mBAAS,IAR5B+B,EAAA7B,OAAAC,EAAA,EAAAD,CAAA4B,EAAA,GAQNE,EARMD,EAAA,GAQIE,EARJF,EAAA,GAAAG,EASalC,mBAAS,MATtBmC,EAAAjC,OAAAC,EAAA,EAAAD,CAAAgC,EAAA,GASNE,EATMD,EAAA,GASCE,EATDF,EAAA,GAWbG,oBAAU,WACRC,MAAM,2CACHC,KAAK,SAACC,GAAD,OAASA,EAAIC,SAClBF,KAAK,SAAAG,GACJC,EAAQD,MAEZ,IAEF,IAAMC,EAAU,SAAAC,GAAmE,IAAjEzC,EAAiEyC,EAAjEzC,KAAM0C,EAA2DD,EAA3DC,MAAOlC,EAAoDiC,EAApDjC,UAAWI,EAAyC6B,EAAzC7B,UAAW+B,EAA8BF,EAA9BE,aAAcC,EAAgBH,EAAhBG,WACjE3C,EAAQD,GACRK,EAAYqC,GACZjC,EAAaD,GACbK,EAAaD,GACbK,EAAS0B,GACTtB,EAAUuB,IAzBC,SAAAC,IAAA,OAAAA,EAAA/C,OAAAgD,EAAA,EAAAhD,CAAAiD,EAAAC,EAAAC,KA8Cb,SAAAC,IAAA,OAAAH,EAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACQnB,MAAK,gCAAAoB,OAAiCnD,EAAjC,WACRgC,KAAK,SAACC,GAAD,OAASA,EAAIC,SAClBF,KACC,SAACoB,GACCC,QAAQC,IAAI,GAAGF,GACf,IAAMG,EAAKH,EAAOI,IAAI,SAACC,GAAD,OACpBC,EAAAd,EAAAe,cAAA,OAAKC,UAAU,QACbF,EAAAd,EAAAe,cAACE,EAAA,EAAD,KACFH,EAAAd,EAAAe,cAACE,EAAA,EAAKC,QAAN,CAAcC,OAAK,GACjBL,EAAAd,EAAAe,cAACK,EAAA,EAAD,CAAMC,SAAO,EAACC,SAAO,GACjBR,EAAAd,EAAAe,cAACK,EAAA,EAAKG,KAAN,KACET,EAAAd,EAAAe,cAACK,EAAA,EAAKI,KAAN,CAAWxE,KAAK,SAASyE,KAAK,QAAQC,cAAc,WACpDZ,EAAAd,EAAAe,cAACK,EAAA,EAAKF,QAAN,KACEJ,EAAAd,EAAAe,cAACK,EAAA,EAAKO,OAAN,CAAaC,GAAG,IAAIC,KAAMhB,EAAKiB,SAAUjB,EAAK7D,MAC9C8D,EAAAd,EAAAe,cAACK,EAAA,EAAKW,YAAN,CAAkBH,GAAG,KAAKf,EAAKmB,oBAQ3CnD,EAAY8B,IAEd,SAAC3B,GACCyB,QAAQC,IAAI1B,KA1BpB,wBAAAoB,EAAA6B,SAAA/B,OA9CagC,MAAAC,KAAAC,WAkFb,OACEtB,EAAAd,EAAAe,cAAA,WACED,EAAAd,EAAAe,cAAA,OAAKC,UAAU,UACbF,EAAAd,EAAAe,cAACY,EAAA,EAAD,CAAQC,GAAG,MACTd,EAAAd,EAAAe,cAACsB,EAAA,EAAD,CAAOC,UAAQ,EAACC,IAAKnE,IAAWhB,IAGpC0D,EAAAd,EAAAe,cAAA,OAAKC,UAAU,UACbF,EAAAd,EAAAe,cAACyB,EAAA,EAAD,CAAMC,SA1DS,WACnBtD,MAAK,gCAAAoB,OAAiC/B,IACnCY,KAAK,SAACC,GAAD,OAAUA,EAAIC,SACnBF,KAAK,SAAAG,GACDA,EAAKmD,QACNzD,EAASM,EAAKmD,UAGdlD,EAAQD,GACRN,EAAS,WAkDT6B,EAAAd,EAAAe,cAACyB,EAAA,EAAKG,MAAN,KACE7B,EAAAd,EAAAe,cAACyB,EAAA,EAAKI,MAAN,CACEC,YAAY,cACZ7F,KAAK,cACL8F,SAnES,SAACC,GACpBtE,EAAasE,EAAEC,OAAOC,UAoEdnC,EAAAd,EAAAe,cAACyB,EAAA,EAAKU,OAAN,CAAaC,QAAQ,oBAIzBnE,EAAQ8B,EAAAd,EAAAe,cAAA,OAAKC,UAAU,SACvBF,EAAAd,EAAAe,cAACqC,EAAA,EAAD,CAASC,UAAQ,GACfvC,EAAAd,EAAAe,cAACqC,EAAA,EAAQzB,OAAT,KAAgBb,EAAAd,EAAAe,cAAA,6CAChBD,EAAAd,EAAAe,cAAA,6EAGDD,EAAAd,EAAAe,cAAA,OAAKC,UAAU,QAChBF,EAAAd,EAAAe,cAACE,EAAA,EAAD,KACEH,EAAAd,EAAAe,cAACsB,EAAA,EAAD,CAAOE,IAAKnE,EAAQkF,SAAO,EAACC,IAAI,IAChCzC,EAAAd,EAAAe,cAACE,EAAA,EAAKC,QAAN,KACEJ,EAAAd,EAAAe,cAACE,EAAA,EAAKU,OAAN,KAAc3E,GACd8D,EAAAd,EAAAe,cAACE,EAAA,EAAKU,OAAN,KAAcvE,IAEhB0D,EAAAd,EAAAe,cAACE,EAAA,EAAKC,QAAN,CAAcC,OAAK,GACjBL,EAAAd,EAAAe,cAAA,SACED,EAAAd,EAAAe,cAACS,EAAA,EAAD,CAAMxE,KAAK,SACVQ,EAFH,mCAKFsD,EAAAd,EAAAe,cAACE,EAAA,EAAKC,QAAN,CAAcC,OAAK,GACjBL,EAAAd,EAAAe,cAAA,SACED,EAAAd,EAAAe,cAACS,EAAA,EAAD,CAAMxE,KAAK,SACVgB,EAFH,yBAKF8C,EAAAd,EAAAe,cAACE,EAAA,EAAKC,QAAN,CAAcC,OAAK,GACjBL,EAAAd,EAAAe,cAAA,SACED,EAAAd,EAAAe,cAACS,EAAA,EAAD,CAAMxE,KAAK,SACVY,EAFH,mCAKFkD,EAAAd,EAAAe,cAACmC,EAAA,EAAD,CAAQM,QAAQ,UAAUC,QApIrB,kBAAA5D,EAAAqC,MAAAC,KAAAC,aAoIL,gBAKJtB,EAAAd,EAAAe,cAAA,OAAKC,UAAU,WACfF,EAAAd,EAAAe,cAAC2C,EAAA,EAAD,KACE5C,EAAAd,EAAAe,cAAC2C,EAAA,EAAKC,OAAN,CAAaC,MAAO,GAClB9C,EAAAd,EAAAe,cAAC8C,EAAA,EAAD,KAEE/C,EAAAd,EAAAe,cAAA,OAAK+C,MAAO,CAAEC,OAAQ,IAAKC,UAAW,WACrCpF,OAMNA,IC9IQqF,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC3H,EAAAuG,EAAA,GAAA3D,KAAA5C,EAAA4H,KAAA,WAAqBhF,KAAK,SAAAK,GAAiD,IAA9C4E,EAA8C5E,EAA9C4E,OAAQC,EAAsC7E,EAAtC6E,OAAQC,EAA8B9E,EAA9B8E,OAAQC,EAAsB/E,EAAtB+E,OAAQC,EAAchF,EAAdgF,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,MCDdQ,IAASC,OACP7D,EAAAd,EAAAe,cAACD,EAAAd,EAAM4E,WAAP,KACE9D,EAAAd,EAAAe,cAAC8D,EAAD,OAEFC,SAASC,eAAe,SAM1Bd","file":"static/js/main.37d3ef84.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";","import React, {useState,useEffect} from 'react';\nimport { Form, Card, Image, Icon, Header, List, Message, Button, Grid, Segment} from 'semantic-ui-react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  const [name, setName] = useState('');\n  const [userName, setUsername] = useState('');\n  const [followers,setFollowers] = useState('');\n  const [following, setFollowing] = useState('');\n  const [repos, setRepos] = useState('');\n  const [avatar,setAvatar] = useState('');\n  const [userInput, setUserInput] = useState('');\n  const [repoData, setRepoData] = useState('');\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    fetch('https://api.github.com/users/zhengzhe46')\n      .then((res) => res.json())\n      .then(data => {\n        setData(data);\n      });\n  },[]);\n\n  const setData = ({name, login, followers, following, public_repos, avatar_url}) => {\n    setName(name);\n    setUsername(login);\n    setFollowers(followers);\n    setFollowing(following);\n    setRepos(public_repos);\n    setAvatar(avatar_url);\n  };\n\n  const handleSearch = (e) => {\n    setUserInput(e.target.value);\n  };\n\n  const handleSubmit = () => {\n    fetch(`https://api.github.com/users/${userInput}`)\n      .then((res)  => res.json())\n      .then(data => {\n        if(data.message){\n          setError(data.message);\n        }\n        else{\n          setData(data);\n          setError(null);\n        }\n      });\n  };\n  \n  async function repoDataURL(){\n    await fetch(`https://api.github.com/users/${userName}/repos`)\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          console.log(36,result);\n          const list=result.map((item) => (\n            <div className=\"repo\">\n              <Card>\n            <Card.Content extra>\n              <List divided relaxed>\n                  <List.Item>\n                    <List.Icon name='github' size='large' verticalAlign='middle' />\n                    <List.Content>\n                      <List.Header as='a' href={item.svn_url}>{item.name}</List.Header>\n                      <List.Description as='a'>{item.created_at}</List.Description>\n                    </List.Content>\n                  </List.Item>\n              </List>\n              </Card.Content>\n             </Card>\n            </div>\n          ));\n          setRepoData(list);\n        },\n        (error) => {\n          console.log(error);\n\n        }\n      );\n  }\n\n  \n  \n\n\n  return (\n    <div>\n      <div className='navbar'>\n        <Header as='h2'>\n          <Image circular src={avatar} />{userName}\n        </Header>\n      </div>\n      <div className='search'>\n        <Form onSubmit={handleSubmit}>\n          <Form.Group>\n            <Form.Input\n              placeholder='Github user'\n              name='github user'\n              onChange={handleSearch}\n            />\n            <Form.Button content='查詢' />\n          </Form.Group>\n        </Form>\n      </div>\n      { error ?(<div className=\"error\">\n        <Message negative>\n          <Message.Header><h1>無用戶資訊</h1></Message.Header>\n          <p>(請您輸入正確用戶賬號)</p>\n        </Message>\n      </div>\n      ):(<dic className=\"card\">\n        <Card>\n          <Image src={avatar} wrapped ui={false} />\n          <Card.Content>\n            <Card.Header>{name}</Card.Header>\n            <Card.Header>{userName}</Card.Header>\n          </Card.Content>\n          <Card.Content extra>\n            <a>\n              <Icon name='user' />\n              {followers} 追隨者(Followers)\n            </a>\n          </Card.Content>\n          <Card.Content extra>\n            <a>\n              <Icon name='user' />\n              {repos} 倉儲(Repos)\n            </a>\n          </Card.Content>\n          <Card.Content extra>\n            <a>\n              <Icon name='user' />\n              {following} 關注者(Following)\n            </a>\n          </Card.Content>\n          <Button variant=\"primary\" onClick={repoDataURL}>Click Here</Button>\n          \n        </Card> \n    \n      </dic>)}\n      <div className='inputid'>\n      <Grid>\n        <Grid.Column width={4}>\n          <Segment>\n\n            <pre style={{ height: 150, overflowY: 'scroll' }}>\n            {repoData}\n            </pre>\n          </Segment>\n        </Grid.Column>\n      </Grid>\n      </div>\n      {repoData}\n\n    </div>\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}